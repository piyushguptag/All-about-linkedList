public class Main
{
    private listNode head;
    private listNode tail;
    private int length;
    
    private class listNode{
        private int data;
        private listNode next;
        private listNode previous;
        
        public listNode(int data){
            this.data = data;
        }
    }
    
    public Main(){
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    
    public boolean isEmpty(){
        return length==0;
    }
    public int length(){
        return length;
    }
    public void insertAtBegin(int n){
        listNode newNode = new listNode(n);
        if(head == null){
            head = newNode;
            tail = newNode;
            length++;
        }else{
            head.previous = newNode;
            newNode.next = head;
            head = newNode;
            length++;
        }
    }
    public void insertAtLast(int n){
        listNode newNode= new listNode(n);
        if(isEmpty()){
            head = newNode;
            tail = newNode;
            length++;
        }else{
            tail.next=newNode;
            newNode.previous = tail;
            tail = newNode;
            length++;
        }
    }
    public void deleteFirst(){
        if(isEmpty()){
            System.out.println("No element found");
            return;
        }
        if(head == tail){
            head = null;
            tail = null;
            length--;
        }else{
            listNode current = head;
            head = head.next;
            current.next = null;
            head.previous = null;
            length--;
        }
        
    }public void delete(){
        if(tail == null){
            System.out.println("No such element Found");
            return;
        }if(tail == head){
            tail = null;
            head = null;
            length--;
        }else{
            listNode current = tail ;
            tail = tail.previous;
            current.previous = null;
            tail.next = null;
            length--;
        }
        
    }
    public void displayForward(){
        if(head == null){
            return;
        }
        listNode temp = head;
        
        while(temp!=null){
            System.out.print(temp.data + " --> ");
            temp=temp.next;
        }
        System.out.println("null");
    }
	public void displayBackward(){
        if(tail == null){
            return;
        }
        listNode temp = tail;
        
        while(temp!=null){
            System.out.print(temp.data + " --> ");
            temp=temp.previous;
        }
        System.out.println("null");
    }
	public static void main(String[] args) {
		Main dll = new Main();
		dll.insertAtBegin(1);
		dll.insertAtBegin(2);
		dll.insertAtBegin(3);
		dll.displayForward();
		dll.insertAtLast(4);
		dll.displayForward();
		dll.insertAtLast(5);
		dll.displayForward();
		System.out.println(dll.length());
		dll.deleteFirst();
		dll.displayForward();
		System.out.println(dll.length());
		dll.delete();
		dll.displayForward();
		System.out.println(dll.length());
		
	}
}
